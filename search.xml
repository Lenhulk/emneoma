<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>atomic一定是线程安全的吗？</title>
      <link href="/2019/06/23/atomic%E4%B8%80%E5%AE%9A%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97%EF%BC%9F/"/>
      <url>/2019/06/23/atomic%E4%B8%80%E5%AE%9A%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><strong>不是</strong></p></blockquote><a id="more"></a><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>在多线程同时工作的情况下，系统会给每条线程分配一个独立的栈空间，但是他们会公用堆里面的数据。<br>通过运用线程锁和原子性等方法避免多条线程同时访问同一块内存变量造成的数据错误或者冲突。</p><h2 id="atomic一定安全么？"><a href="#atomic一定安全么？" class="headerlink" title="atomic一定安全么？"></a>atomic一定安全么？</h2><p>nonatomic的内存管理语义是非原子性的，非原子性的操作本来就是线程不安全的，而atomic的操作是原子性的，但是并不意味着它是线程安全的，它会增加正确的几率，能够更好的避免线程的错误，但是它仍然是线程不安全的。</p><p><em>atomic所说的线程安全只是保证了getter和setter存取方法的线程安全，并不能保证整个对象是线程安全的。</em></p><p>eg:当线程A进行写操作，这时其他线程的读或者写操作会因为该操作而等待。当A线程的写操作结束后，B线程进行写操作，然后当A线程需要读操作时，却获得了在B线程中的值，这就破坏了线程安全，如果有线程C在A线程读操作前release了该属性，那么还会导致程序崩溃。所以仅仅使用atomic并不会使得线程安全，我们还要为线程添加lock来确保线程的安全。</p><p>而且，atomic比nonatomic的存取速度相差约20倍，因此在日常开发中一般都是使用nonatomic。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> atomic </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>assign VS weak? __weak VS __block?</title>
      <link href="/2019/06/11/assign-VS-weak-block-VS-weak/"/>
      <url>/2019/06/11/assign-VS-weak-block-VS-weak/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>零碎却不简单。</p></blockquote><a id="more"></a><h1 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h1><p><strong>assign</strong> 用于基础类型的赋值，不改变属性的引用计数。如：<em>NSInteger, CGFloat, int float double</em></p><blockquote><p>assign其实也可以用来修饰对象，但是你可不要轻易尝试。因为被assign修饰的对象在释放之后，指针的地址还是存在的，也就是说指针并没有被置为nil。如果在后续的内存分配中，刚好分到了这块地址，程序就会崩溃掉。</p></blockquote><h1 id="weak"><a href="#weak" class="headerlink" title="weak"></a>weak</h1><p><strong>weak</strong> 用于对象类型，不改变属性的引用计数，当该对象被释放的时候，该弱引用的属性自动失效并且被赋值为<strong><em>nil</em></strong>，该属性可以避免循环引用问题。</p><h1 id="weak-1"><a href="#weak-1" class="headerlink" title="__weak"></a>__weak</h1><p><strong>__weak</strong>是所有权修饰符，被修饰的变量在使用结束后会被释放。(不会在block代码块中被retain)<br>所有权修饰符包括: <em>__strong,  __weak, __unsafe_unretained, __autorealease</em>。</p><blockquote><p>使用__unsafe_unretained 和 __weak都可以避免循环引用的问题，但由于前者是unsafe的，会造成野指针问题，所以尽量少用unsafe_unretained关键字</p></blockquote><h1 id="block"><a href="#block" class="headerlink" title="__block"></a>__block</h1><p><strong>__block</strong>用于指明当前变量可以在block内部进行修改（ARC下会被retain）。</p><blockquote><p>因为在block申明的同时会捕获该block所使用的全部自动变量的值，仅有使用权没有修改权利，使用了__block关键字修饰后的变量可以在block内部进行修改。</p></blockquote><p>在block内，要避免循环引用要使用：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__weak__typeof(<span class="keyword">self</span>)weakSelf =<span class="keyword">self</span>;</span><br></pre></td></tr></table></figure><p>并且，在使用到self之后的对象或者属性防止在使用之前被析构引发不可预测的问题，所以要使用strong再把它持有一下。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__strong__typeof(weakSelf)strongSelf = weakSelf;</span><br></pre></td></tr></table></figure><h2 id="易混淆点"><a href="#易混淆点" class="headerlink" title="易混淆点"></a>易混淆点</h2><p>若 object 本身沒有去 retain 这个 block (即block不是某个对象的property)，則可以直接在 block 中使用 self。<br>比如自定义的block块（一个匿名函数）在代码中执行；经常问到的animation动画是否需要使用weakblock的问题。</p><div class="note default">事实上大多數的 iOS 原生套件，以及 GCD 的 block 是不會造成 retain cycle 的，因为他们并沒有去 retain block。</div><p>特别要注意的是，讲一个变量直接定义为实例变量而非属性的时候，在block中使用时还是会retain到self导致循环引用，因为ivar也是self的一部分：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">XXXViewController</span> () </span>&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">self</span>.completionHandler = ^&#123;</span><br><span class="line">    <span class="comment">// 直接引用就相当于 self-&gt;str</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是！ivar是无法用weakSelf去取值的，因此<br>这里正确的做法还是要用到weakSelf和strongSelf的帮助：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__<span class="keyword">weak</span> __<span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line"><span class="keyword">self</span>.completionHandler = ^&#123;</span><br><span class="line">    __<span class="keyword">strong</span> __<span class="keyword">typeof</span>(weakSelf) strongSelf = weakSelf;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, strongSelf-&gt;str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 基础知识 </tag>
            
            <tag> 修饰符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS内存管理原理浅谈</title>
      <link href="/2019/05/30/iOS%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%8E%9F%E7%90%86%E6%B5%85%E8%B0%88/"/>
      <url>/2019/05/30/iOS%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%8E%9F%E7%90%86%E6%B5%85%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>iOS的内存管理策略是什么？ ARC又是为了什么而诞生的？</p><p><strong>来自面试官的拷问</strong></p></blockquote><img src="http://ps1z14rsd.bkt.clouddn.com/images/201905/arc-pic.jpg"><a id="more"></a><p><em>2011 年，苹果在 WWDC 大会上提出了自动的引用计数（ARC）。<br>ARC 背后的原理是依赖编译器的静态分析能力，通过在编译时找出合理的位置，自动插入引用计数管理代码，从而彻底解放被内存管理禁锢的<del>码农</del>iOS开发者。</em></p><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>引用计数（Reference Count）是一个简单而有效的管理对象生命周期的方式。</p><p>当我们创建一个新对象的时候，它的引用计数为 1，当有一个新的指针指向这个对象时，我们将其引用计数加 1，当某个指针不再指向这个对象是，我们将其引用计数减 1，当对象的引用计数变为 0 时，说明这个对象不再被任何指针指向了，这个时候我们就可以将对象销毁，回收内存。</p><img src="http://ps1z14rsd.bkt.clouddn.com/images/201905/memory-ref-count1.png"><h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><p>在没有引用计数的情况下，一般内存管理的原则是 “谁申请谁释放”，但是当多个对象需要引用到某一个X对象/变量时，哪些对象需要长时间使用X对象，都会遇到谁来销毁X对象的问题。<br>引用计数的出现，使得对象在被创建和使用时<em>retain count</em> +1，使用完后-1，对象的生命周期就可以交给引用计数来记录。</p><h3 id="不要向已经释放的对象发送消息"><a href="#不要向已经释放的对象发送消息" class="headerlink" title="不要向已经释放的对象发送消息"></a>不要向已经释放的对象发送消息</h3><p>当某个对象的内存已经被回收，但是我们没有对他置空(nil)，仍然向它发送消息时，如果该内存被复用了，很可能会造成程序异常崩溃，也被称为僵尸对象或者野指针异常。</p><h2 id="ARC"><a href="#ARC" class="headerlink" title="ARC"></a>ARC</h2><p>ARC 能解决 iOS 开发中 “极大部分” 的内存管理问题，但是开发者仍然需要注意：</p><ul><li>iOS 底层的 ** Core Foundation 对象 ** 不在 ARC 的管理下，需要手工管理它们的引用计数。</li><li>避免循环引用问题。</li><li>block及delegate的内存管理。</li></ul><h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><p>引用计数这种管理内存的方式有一个比较大的瑕疵，即不能很好的解决循环引用（Reference Cycle）问题。</p><p>对象 A 和对象 B，相互引用了对方作为自己的成员变量，只有当自己销毁时，才会将成员变量的引用计数减 1。这两个对象的销毁依赖于对方的销毁，即使在外界已经没有任何指针能够访问到它们了，它们也无法被释放。</p><img src="http://ps1z14rsd.bkt.clouddn.com/images/201905/memory-cycle-2.png"><p>多个对象依次持有对方，形式一个环状，也可以造成循环引用问题，而且在真实编程环境中，这种情况更难被发现。</p><img src="http://ps1z14rsd.bkt.clouddn.com/images/201905/memory-cycle-3.png"><h4 id="主动断开"><a href="#主动断开" class="headerlink" title="主动断开"></a>主动断开</h4><p>如果程序员明确知道这里会存在循环引用，在合理的位置主动断开环中的一个引用，使得对象得以回收。例如如下一个引用链：</p><ol><li>Controller 持有了网络请求对象</li><li>网络请求对象持有了回调的 block</li><li>回调的 block 里面使用了 self（即持有了 Controller）</li></ol><p>解决办法就是，在网络请求结束，网络请求对象执行完 block 之后，主动释放对于 block 的持有，以便打破循环引用。（xxx.Block = nil）</p><h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h4><p>弱引用虽然持有对象，但是并不增加引用计数，这样就避免了循环引用的产生。</p><p>在 iOS 开发中，弱引用通常在 delegate 模式中使用，View Controller 的 delegate 成员变量通常是一个弱引用，以避免两个 ViewController 造成循环引用问题，例如tableView的delegate。</p><img src="http://ps1z14rsd.bkt.clouddn.com/images/201905/memory-cycle-4.png"><h5 id="弱引用的实现原理"><a href="#弱引用的实现原理" class="headerlink" title="弱引用的实现原理"></a>弱引用的实现原理</h5><p>系统对于每一个有弱引用的对象，都维护一个表来记录它所有的弱引用的指针地址。当一个对象的引用计数为 0 时，系统就通过这张表，找到所有的弱引用指针，继而把它们都置成 nil。</p><p>从原理我们得知，弱引用的使用是有<strong>额外开销</strong>的。虽然这个开销很小，但是如果一个地方我们肯定它不需要弱引用的特性，就不应该盲目使用弱引用，因为：</p><ul><li>当我们在创建这个对象时，如果临时使用一个弱引用持有它，就会因为 weak 变量并不持有对象，就会造成一个对象刚被创建就销毁掉。</li><li>大部分 ViewController 的视图对象的生命周期与 ViewController 本身是一致的，没有必要额外做这个事情。</li></ul><h2 id="Xcode-检测循环引用"><a href="#Xcode-检测循环引用" class="headerlink" title="Xcode 检测循环引用"></a>Xcode 检测循环引用</h2><p>在 Xcode 的菜单栏选择：Product -&gt; Profile，然后选择 “Leaks”，再点击右下角的”Profile” 按钮开始检测。</p><p>我们在模拟器里进行一些界面的切换。如果出现了内存泄漏，就可以在 Instruments 中看到红色的带”x”的图标写着“n new leaks”..</p><p>点击 “Leaks Checks” 栏，再点击”Cycles &amp; Roots”，就可以看到以图形方式显示出来的循环引用。可以比较方便地找到循环引用的对象了。如图：</p><img src="http://ps1z14rsd.bkt.clouddn.com/images/201905/memory-instruments-5.png">]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 基础知识 </tag>
            
            <tag> ARC </tag>
            
            <tag> 内存管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“git add .” not worked - “诡异”问题解决</title>
      <link href="/2019/05/26/%E2%80%9Cgit-add-%E2%80%9D-not-worked-%E2%80%9C%E8%AF%A1%E5%BC%82%E2%80%9D%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/05/26/%E2%80%9Cgit-add-%E2%80%9D-not-worked-%E2%80%9C%E8%AF%A1%E5%BC%82%E2%80%9D%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<div class="note warning"><p>听终端的话，别留下warning。</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"fuckit"</span></span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">  (commit or discard the untracked or modified content <span class="keyword">in</span> submodules)</span><br><span class="line"></span><br><span class="line">modified:   xxx/themes/next (modified content, untracked content)</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><hr><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>自从把博客源码托管到github仓库之后，腰也不酸了，腿也不痛了，一口气上五楼..咳咳</p><p>之后我给hexo换了一个NEXT主题，爽炸了！可是今天修改了主题某个js文件，<br>“<strong>git status</strong>”之后却显示<em>“nothing to commit”</em> ???</p><p>上github上看源码仓库，却发现主题文件夹下空空如也..仓库却显示没问题，<strong>git log</strong>，一直停留在上个提交版本。</p><p>于是一直死循环操作“<strong>git add .</strong>”&amp;&amp;“<strong>git commit -m “xxx”</strong>”，<br>终端却一直无情回复我“Changes not staged for commit”，如上面那段代码所示。</p><p>尝试按照终端提示的办法无法解决。</p><p>这就很诡异了？于是我花了一个晚上疯狂踩坑..</p><h2 id="爬坑"><a href="#爬坑" class="headerlink" title="爬坑"></a>爬坑</h2><p>搜索了各个关键词句，看了stackoverflow和几篇无用博文还是没有找到合适的解决。<br>直觉是文件引入的问题，一口气把next文件 “<strong>git rm –f xxx/themes/next</strong>” 再add进去，仔细一看却发现有如下提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">warning: adding embedded git repository: xxx/themes/next</span><br><span class="line">hint: You<span class="string">'ve added another git repository inside your current repository.</span></span><br><span class="line"><span class="string">hint: Clones of the outer repository will not contain the contents of</span></span><br><span class="line"><span class="string">hint: the embedded repository and will not know how to obtain it.</span></span><br><span class="line"><span class="string">hint: If you meant to add a submodule, use:</span></span><br><span class="line"><span class="string">hint:</span></span><br><span class="line"><span class="string">hint: git submodule add &lt;url&gt; xxx/themes/next</span></span><br><span class="line"><span class="string">hint:</span></span><br><span class="line"><span class="string">hint: If you added this path by mistake, you can remove it from the</span></span><br><span class="line"><span class="string">hint: index with:</span></span><br><span class="line"><span class="string">hint:</span></span><br><span class="line"><span class="string">hint: git rm --cached xxx/themes/next</span></span><br><span class="line"><span class="string">hint:</span></span><br><span class="line"><span class="string">hint: See "git help submodule" for more information.</span></span><br></pre></td></tr></table></figure><p>还好我认识一点英文，想起当时是从git仓库直接克隆next的，却因为粗心没有看warning，径直commit了（居然也没事- -!），才会引发以上的惨剧。<br>于是乎赶紧把主题下的git仓库删除了。</p><p>偷了个懒，把next文件夹移走，commit，再移进来，add之后总算能看到一排排的主题相关文件辣～</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>git仓库下要提交A文件夹，A/B文件夹下也包含一个git仓库（.git）。使用<strong>git add .</strong> 就只能加入一个空的B文件夹。</p><hr><h4 id="这个故事告诉我们以LINUX“没有回应就是最好的回应”的尿性来说，还是好好看终端回复吧。"><a href="#这个故事告诉我们以LINUX“没有回应就是最好的回应”的尿性来说，还是好好看终端回复吧。" class="headerlink" title="这个故事告诉我们以LINUX“没有回应就是最好的回应”的尿性来说，还是好好看终端回复吧。"></a>这个故事告诉我们以LINUX“没有回应就是最好的回应”的尿性来说，还是好好看终端回复吧。</h4>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
